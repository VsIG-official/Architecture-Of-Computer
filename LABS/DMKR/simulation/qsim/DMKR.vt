// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/15/2020 17:48:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DMKR_2_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DMKR_2_2_vlg_sample_tst(
	A,
	B,
	C,
	enable,
	G,
	G2,
	start,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input [7:0] C;
input  enable;
input  G;
input  G2;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or enable or G or G2 or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DMKR_2_2_vlg_check_tst (
	cnt,
	newA,
	out_x1,
	out_x2,
	result,
	y1,
	y2,
	y3,
	y4,
	sampler_rx
);
input [7:0] cnt;
input [7:0] newA;
input  out_x1;
input  out_x2;
input [7:0] result;
input  y1;
input  y2;
input  y3;
input  y4;
input sampler_rx;

reg [7:0] cnt_expected;
reg [7:0] newA_expected;
reg  out_x1_expected;
reg  out_x2_expected;
reg [7:0] result_expected;
reg  y1_expected;
reg  y2_expected;
reg  y3_expected;
reg  y4_expected;

reg [7:0] cnt_prev;
reg [7:0] newA_prev;
reg  out_x1_prev;
reg  out_x2_prev;
reg [7:0] result_prev;
reg  y1_prev;
reg  y2_prev;
reg  y3_prev;
reg  y4_prev;

reg [7:0] cnt_expected_prev;
reg [7:0] newA_expected_prev;
reg  out_x1_expected_prev;
reg  out_x2_expected_prev;
reg [7:0] result_expected_prev;
reg  y1_expected_prev;
reg  y2_expected_prev;
reg  y3_expected_prev;
reg  y4_expected_prev;

reg [7:0] last_cnt_exp;
reg [7:0] last_newA_exp;
reg  last_out_x1_exp;
reg  last_out_x2_exp;
reg [7:0] last_result_exp;
reg  last_y1_exp;
reg  last_y2_exp;
reg  last_y3_exp;
reg  last_y4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	cnt_prev = cnt;
	newA_prev = newA;
	out_x1_prev = out_x1;
	out_x2_prev = out_x2;
	result_prev = result;
	y1_prev = y1;
	y2_prev = y2;
	y3_prev = y3;
	y4_prev = y4;
end

// update expected /o prevs

always @(trigger)
begin
	cnt_expected_prev = cnt_expected;
	newA_expected_prev = newA_expected;
	out_x1_expected_prev = out_x1_expected;
	out_x2_expected_prev = out_x2_expected;
	result_expected_prev = result_expected;
	y1_expected_prev = y1_expected;
	y2_expected_prev = y2_expected;
	y3_expected_prev = y3_expected;
	y4_expected_prev = y4_expected;
end



// expected out_x1
initial
begin
	out_x1_expected = 1'bX;
end 

// expected out_x2
initial
begin
	out_x2_expected = 1'bX;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 

// expected y1
initial
begin
	y1_expected = 1'bX;
end 

// expected y2
initial
begin
	y2_expected = 1'bX;
end 

// expected y3
initial
begin
	y3_expected = 1'bX;
end 

// expected y4
initial
begin
	y4_expected = 1'bX;
end 
// expected cnt[ 7 ]
initial
begin
	cnt_expected[7] = 1'bX;
end 
// expected cnt[ 6 ]
initial
begin
	cnt_expected[6] = 1'bX;
end 
// expected cnt[ 5 ]
initial
begin
	cnt_expected[5] = 1'bX;
end 
// expected cnt[ 4 ]
initial
begin
	cnt_expected[4] = 1'bX;
end 
// expected cnt[ 3 ]
initial
begin
	cnt_expected[3] = 1'bX;
end 
// expected cnt[ 2 ]
initial
begin
	cnt_expected[2] = 1'bX;
end 
// expected cnt[ 1 ]
initial
begin
	cnt_expected[1] = 1'bX;
end 
// expected cnt[ 0 ]
initial
begin
	cnt_expected[0] = 1'bX;
end 
// expected newA[ 7 ]
initial
begin
	newA_expected[7] = 1'bX;
end 
// expected newA[ 6 ]
initial
begin
	newA_expected[6] = 1'bX;
end 
// expected newA[ 5 ]
initial
begin
	newA_expected[5] = 1'bX;
end 
// expected newA[ 4 ]
initial
begin
	newA_expected[4] = 1'bX;
end 
// expected newA[ 3 ]
initial
begin
	newA_expected[3] = 1'bX;
end 
// expected newA[ 2 ]
initial
begin
	newA_expected[2] = 1'bX;
end 
// expected newA[ 1 ]
initial
begin
	newA_expected[1] = 1'bX;
end 
// expected newA[ 0 ]
initial
begin
	newA_expected[0] = 1'bX;
end 
// generate trigger
always @(cnt_expected or cnt or newA_expected or newA or out_x1_expected or out_x1 or out_x2_expected or out_x2 or result_expected or result or y1_expected or y1 or y2_expected or y2 or y3_expected or y3 or y4_expected or y4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cnt = %b | expected newA = %b | expected out_x1 = %b | expected out_x2 = %b | expected result = %b | expected y1 = %b | expected y2 = %b | expected y3 = %b | expected y4 = %b | ",cnt_expected_prev,newA_expected_prev,out_x1_expected_prev,out_x2_expected_prev,result_expected_prev,y1_expected_prev,y2_expected_prev,y3_expected_prev,y4_expected_prev);
	$display("| real cnt = %b | real newA = %b | real out_x1 = %b | real out_x2 = %b | real result = %b | real y1 = %b | real y2 = %b | real y3 = %b | real y4 = %b | ",cnt_prev,newA_prev,out_x1_prev,out_x2_prev,result_prev,y1_prev,y2_prev,y3_prev,y4_prev);
`endif
	if (
		( cnt_expected_prev[0] !== 1'bx ) && ( cnt_prev[0] !== cnt_expected_prev[0] )
		&& ((cnt_expected_prev[0] !== last_cnt_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cnt_exp[0] = cnt_expected_prev[0];
	end
	if (
		( cnt_expected_prev[1] !== 1'bx ) && ( cnt_prev[1] !== cnt_expected_prev[1] )
		&& ((cnt_expected_prev[1] !== last_cnt_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cnt_exp[1] = cnt_expected_prev[1];
	end
	if (
		( cnt_expected_prev[2] !== 1'bx ) && ( cnt_prev[2] !== cnt_expected_prev[2] )
		&& ((cnt_expected_prev[2] !== last_cnt_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cnt_exp[2] = cnt_expected_prev[2];
	end
	if (
		( cnt_expected_prev[3] !== 1'bx ) && ( cnt_prev[3] !== cnt_expected_prev[3] )
		&& ((cnt_expected_prev[3] !== last_cnt_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cnt_exp[3] = cnt_expected_prev[3];
	end
	if (
		( cnt_expected_prev[4] !== 1'bx ) && ( cnt_prev[4] !== cnt_expected_prev[4] )
		&& ((cnt_expected_prev[4] !== last_cnt_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cnt_exp[4] = cnt_expected_prev[4];
	end
	if (
		( cnt_expected_prev[5] !== 1'bx ) && ( cnt_prev[5] !== cnt_expected_prev[5] )
		&& ((cnt_expected_prev[5] !== last_cnt_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cnt_exp[5] = cnt_expected_prev[5];
	end
	if (
		( cnt_expected_prev[6] !== 1'bx ) && ( cnt_prev[6] !== cnt_expected_prev[6] )
		&& ((cnt_expected_prev[6] !== last_cnt_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cnt_exp[6] = cnt_expected_prev[6];
	end
	if (
		( cnt_expected_prev[7] !== 1'bx ) && ( cnt_prev[7] !== cnt_expected_prev[7] )
		&& ((cnt_expected_prev[7] !== last_cnt_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cnt_exp[7] = cnt_expected_prev[7];
	end
	if (
		( newA_expected_prev[0] !== 1'bx ) && ( newA_prev[0] !== newA_expected_prev[0] )
		&& ((newA_expected_prev[0] !== last_newA_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newA_expected_prev);
		$display ("     Real value = %b", newA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_newA_exp[0] = newA_expected_prev[0];
	end
	if (
		( newA_expected_prev[1] !== 1'bx ) && ( newA_prev[1] !== newA_expected_prev[1] )
		&& ((newA_expected_prev[1] !== last_newA_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newA_expected_prev);
		$display ("     Real value = %b", newA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_newA_exp[1] = newA_expected_prev[1];
	end
	if (
		( newA_expected_prev[2] !== 1'bx ) && ( newA_prev[2] !== newA_expected_prev[2] )
		&& ((newA_expected_prev[2] !== last_newA_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newA_expected_prev);
		$display ("     Real value = %b", newA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_newA_exp[2] = newA_expected_prev[2];
	end
	if (
		( newA_expected_prev[3] !== 1'bx ) && ( newA_prev[3] !== newA_expected_prev[3] )
		&& ((newA_expected_prev[3] !== last_newA_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newA_expected_prev);
		$display ("     Real value = %b", newA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_newA_exp[3] = newA_expected_prev[3];
	end
	if (
		( newA_expected_prev[4] !== 1'bx ) && ( newA_prev[4] !== newA_expected_prev[4] )
		&& ((newA_expected_prev[4] !== last_newA_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newA_expected_prev);
		$display ("     Real value = %b", newA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_newA_exp[4] = newA_expected_prev[4];
	end
	if (
		( newA_expected_prev[5] !== 1'bx ) && ( newA_prev[5] !== newA_expected_prev[5] )
		&& ((newA_expected_prev[5] !== last_newA_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newA_expected_prev);
		$display ("     Real value = %b", newA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_newA_exp[5] = newA_expected_prev[5];
	end
	if (
		( newA_expected_prev[6] !== 1'bx ) && ( newA_prev[6] !== newA_expected_prev[6] )
		&& ((newA_expected_prev[6] !== last_newA_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newA_expected_prev);
		$display ("     Real value = %b", newA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_newA_exp[6] = newA_expected_prev[6];
	end
	if (
		( newA_expected_prev[7] !== 1'bx ) && ( newA_prev[7] !== newA_expected_prev[7] )
		&& ((newA_expected_prev[7] !== last_newA_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port newA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", newA_expected_prev);
		$display ("     Real value = %b", newA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_newA_exp[7] = newA_expected_prev[7];
	end
	if (
		( out_x1_expected_prev !== 1'bx ) && ( out_x1_prev !== out_x1_expected_prev )
		&& ((out_x1_expected_prev !== last_out_x1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_x1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_x1_expected_prev);
		$display ("     Real value = %b", out_x1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_x1_exp = out_x1_expected_prev;
	end
	if (
		( out_x2_expected_prev !== 1'bx ) && ( out_x2_prev !== out_x2_expected_prev )
		&& ((out_x2_expected_prev !== last_out_x2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_x2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_x2_expected_prev);
		$display ("     Real value = %b", out_x2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_x2_exp = out_x2_expected_prev;
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( y1_expected_prev !== 1'bx ) && ( y1_prev !== y1_expected_prev )
		&& ((y1_expected_prev !== last_y1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y1_expected_prev);
		$display ("     Real value = %b", y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_y1_exp = y1_expected_prev;
	end
	if (
		( y2_expected_prev !== 1'bx ) && ( y2_prev !== y2_expected_prev )
		&& ((y2_expected_prev !== last_y2_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y2_expected_prev);
		$display ("     Real value = %b", y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_y2_exp = y2_expected_prev;
	end
	if (
		( y3_expected_prev !== 1'bx ) && ( y3_prev !== y3_expected_prev )
		&& ((y3_expected_prev !== last_y3_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y3_expected_prev);
		$display ("     Real value = %b", y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_y3_exp = y3_expected_prev;
	end
	if (
		( y4_expected_prev !== 1'bx ) && ( y4_prev !== y4_expected_prev )
		&& ((y4_expected_prev !== last_y4_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y4_expected_prev);
		$display ("     Real value = %b", y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_y4_exp = y4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DMKR_2_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg [7:0] C;
reg enable;
reg G;
reg G2;
reg start;
// wires                                               
wire [7:0] cnt;
wire [7:0] newA;
wire out_x1;
wire out_x2;
wire [7:0] result;
wire y1;
wire y2;
wire y3;
wire y4;

wire sampler;                             

// assign statements (if any)                          
DMKR_2_2 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.cnt(cnt),
	.enable(enable),
	.G(G),
	.G2(G2),
	.newA(newA),
	.out_x1(out_x1),
	.out_x2(out_x2),
	.result(result),
	.start(start),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.y4(y4)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 
// C[ 7 ]
initial
begin
	C[7] = 1'b0;
end 
// C[ 6 ]
initial
begin
	C[6] = 1'b0;
end 
// C[ 5 ]
initial
begin
	C[5] = 1'b0;
end 
// C[ 4 ]
initial
begin
	C[4] = 1'b0;
end 
// C[ 3 ]
initial
begin
	C[3] = 1'b0;
end 
// C[ 2 ]
initial
begin
	C[2] = 1'b0;
end 
// C[ 1 ]
initial
begin
	C[1] = 1'b1;
end 
// C[ 0 ]
initial
begin
	C[0] = 1'b1;
end 

// enable
initial
begin
	enable = 1'b1;
end 

// G
always
begin
	G = 1'b0;
	G = #10000 1'b1;
	#10000;
end 

// G2
always
begin
	G2 = 1'b0;
	G2 = #20000 1'b1;
	#20000;
end 

// start
initial
begin
	start = 1'b0;
	start = #20000 1'b1;
	start = #20000 1'b0;
end 

DMKR_2_2_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.enable(enable),
	.G(G),
	.G2(G2),
	.start(start),
	.sampler_tx(sampler)
);

DMKR_2_2_vlg_check_tst tb_out(
	.cnt(cnt),
	.newA(newA),
	.out_x1(out_x1),
	.out_x2(out_x2),
	.result(result),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.y4(y4),
	.sampler_rx(sampler)
);
endmodule

