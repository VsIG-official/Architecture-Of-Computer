// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2020 00:36:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab1_SM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab1_SM_vlg_sample_tst(
	inx,
	iny,
	inz,
	sampler_tx
);
input  inx;
input  iny;
input  inz;
output sampler_tx;

reg sample;
time current_time;
always @(inx or iny or inz)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab1_SM_vlg_check_tst (
	outs,
	outz,
	sampler_rx
);
input  outs;
input  outz;
input sampler_rx;

reg  outs_expected;
reg  outz_expected;

reg  outs_prev;
reg  outz_prev;

reg  outs_expected_prev;
reg  outz_expected_prev;

reg  last_outs_exp;
reg  last_outz_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	outs_prev = outs;
	outz_prev = outz;
end

// update expected /o prevs

always @(trigger)
begin
	outs_expected_prev = outs_expected;
	outz_expected_prev = outz_expected;
end



// expected outs
initial
begin
	outs_expected = 1'bX;
end 

// expected outz
initial
begin
	outz_expected = 1'bX;
end 
// generate trigger
always @(outs_expected or outs or outz_expected or outz)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outs = %b | expected outz = %b | ",outs_expected_prev,outz_expected_prev);
	$display("| real outs = %b | real outz = %b | ",outs_prev,outz_prev);
`endif
	if (
		( outs_expected_prev !== 1'bx ) && ( outs_prev !== outs_expected_prev )
		&& ((outs_expected_prev !== last_outs_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outs :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outs_expected_prev);
		$display ("     Real value = %b", outs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outs_exp = outs_expected_prev;
	end
	if (
		( outz_expected_prev !== 1'bx ) && ( outz_prev !== outz_expected_prev )
		&& ((outz_expected_prev !== last_outz_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outz_expected_prev);
		$display ("     Real value = %b", outz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outz_exp = outz_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab1_SM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg inx;
reg iny;
reg inz;
// wires                                               
wire outs;
wire outz;

wire sampler;                             

// assign statements (if any)                          
Lab1_SM i1 (
// port map - connection between master ports and signals/registers   
	.inx(inx),
	.iny(iny),
	.inz(inz),
	.outs(outs),
	.outz(outz)
);

// inx
always
begin
	inx = 1'b0;
	inx = #20000 1'b1;
	#20000;
end 

// iny
always
begin
	iny = 1'b0;
	iny = #10000 1'b1;
	#10000;
end 

// inz
always
begin
	inz = 1'b0;
	inz = #40000 1'b1;
	#40000;
end 

Lab1_SM_vlg_sample_tst tb_sample (
	.inx(inx),
	.iny(iny),
	.inz(inz),
	.sampler_tx(sampler)
);

Lab1_SM_vlg_check_tst tb_out(
	.outs(outs),
	.outz(outz),
	.sampler_rx(sampler)
);
endmodule

