// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2020 13:23:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Mega_Dominskyi_SM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mega_Dominskyi_SM_vlg_sample_tst(
	in_x1,
	in_x2,
	in_x3,
	in_x4,
	in_x5,
	in_x6,
	in_x7,
	in_x8,
	in_y1,
	in_y2,
	in_y3,
	in_y4,
	in_y5,
	in_y6,
	in_y7,
	in_y8,
	in_z,
	sampler_tx
);
input  in_x1;
input  in_x2;
input  in_x3;
input  in_x4;
input  in_x5;
input  in_x6;
input  in_x7;
input  in_x8;
input  in_y1;
input  in_y2;
input  in_y3;
input  in_y4;
input  in_y5;
input  in_y6;
input  in_y7;
input  in_y8;
input  in_z;
output sampler_tx;

reg sample;
time current_time;
always @(in_x1 or in_x2 or in_x3 or in_x4 or in_x5 or in_x6 or in_x7 or in_x8 or in_y1 or in_y2 or in_y3 or in_y4 or in_y5 or in_y6 or in_y7 or in_y8 or in_z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Mega_Dominskyi_SM_vlg_check_tst (
	out_s1,
	out_s2,
	out_s3,
	out_s4,
	out_s5,
	out_s6,
	out_s7,
	out_s8,
	out_z1,
	sampler_rx
);
input  out_s1;
input  out_s2;
input  out_s3;
input  out_s4;
input  out_s5;
input  out_s6;
input  out_s7;
input  out_s8;
input  out_z1;
input sampler_rx;

reg  out_s1_expected;
reg  out_s2_expected;
reg  out_s3_expected;
reg  out_s4_expected;
reg  out_s5_expected;
reg  out_s6_expected;
reg  out_s7_expected;
reg  out_s8_expected;
reg  out_z1_expected;

reg  out_s1_prev;
reg  out_s2_prev;
reg  out_s3_prev;
reg  out_s4_prev;
reg  out_s5_prev;
reg  out_s6_prev;
reg  out_s7_prev;
reg  out_s8_prev;
reg  out_z1_prev;

reg  out_s1_expected_prev;
reg  out_s2_expected_prev;
reg  out_s3_expected_prev;
reg  out_s4_expected_prev;
reg  out_s5_expected_prev;
reg  out_s6_expected_prev;
reg  out_s7_expected_prev;
reg  out_s8_expected_prev;
reg  out_z1_expected_prev;

reg  last_out_s1_exp;
reg  last_out_s2_exp;
reg  last_out_s3_exp;
reg  last_out_s4_exp;
reg  last_out_s5_exp;
reg  last_out_s6_exp;
reg  last_out_s7_exp;
reg  last_out_s8_exp;
reg  last_out_z1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_s1_prev = out_s1;
	out_s2_prev = out_s2;
	out_s3_prev = out_s3;
	out_s4_prev = out_s4;
	out_s5_prev = out_s5;
	out_s6_prev = out_s6;
	out_s7_prev = out_s7;
	out_s8_prev = out_s8;
	out_z1_prev = out_z1;
end

// update expected /o prevs

always @(trigger)
begin
	out_s1_expected_prev = out_s1_expected;
	out_s2_expected_prev = out_s2_expected;
	out_s3_expected_prev = out_s3_expected;
	out_s4_expected_prev = out_s4_expected;
	out_s5_expected_prev = out_s5_expected;
	out_s6_expected_prev = out_s6_expected;
	out_s7_expected_prev = out_s7_expected;
	out_s8_expected_prev = out_s8_expected;
	out_z1_expected_prev = out_z1_expected;
end



// expected out_s1
initial
begin
	out_s1_expected = 1'bX;
end 

// expected out_s2
initial
begin
	out_s2_expected = 1'bX;
end 

// expected out_s3
initial
begin
	out_s3_expected = 1'bX;
end 

// expected out_s4
initial
begin
	out_s4_expected = 1'bX;
end 

// expected out_s5
initial
begin
	out_s5_expected = 1'bX;
end 

// expected out_s6
initial
begin
	out_s6_expected = 1'bX;
end 

// expected out_s7
initial
begin
	out_s7_expected = 1'bX;
end 

// expected out_s8
initial
begin
	out_s8_expected = 1'bX;
end 

// expected out_z1
initial
begin
	out_z1_expected = 1'bX;
end 
// generate trigger
always @(out_s1_expected or out_s1 or out_s2_expected or out_s2 or out_s3_expected or out_s3 or out_s4_expected or out_s4 or out_s5_expected or out_s5 or out_s6_expected or out_s6 or out_s7_expected or out_s7 or out_s8_expected or out_s8 or out_z1_expected or out_z1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out_s1 = %b | expected out_s2 = %b | expected out_s3 = %b | expected out_s4 = %b | expected out_s5 = %b | expected out_s6 = %b | expected out_s7 = %b | expected out_s8 = %b | expected out_z1 = %b | ",out_s1_expected_prev,out_s2_expected_prev,out_s3_expected_prev,out_s4_expected_prev,out_s5_expected_prev,out_s6_expected_prev,out_s7_expected_prev,out_s8_expected_prev,out_z1_expected_prev);
	$display("| real out_s1 = %b | real out_s2 = %b | real out_s3 = %b | real out_s4 = %b | real out_s5 = %b | real out_s6 = %b | real out_s7 = %b | real out_s8 = %b | real out_z1 = %b | ",out_s1_prev,out_s2_prev,out_s3_prev,out_s4_prev,out_s5_prev,out_s6_prev,out_s7_prev,out_s8_prev,out_z1_prev);
`endif
	if (
		( out_s1_expected_prev !== 1'bx ) && ( out_s1_prev !== out_s1_expected_prev )
		&& ((out_s1_expected_prev !== last_out_s1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_s1_expected_prev);
		$display ("     Real value = %b", out_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_s1_exp = out_s1_expected_prev;
	end
	if (
		( out_s2_expected_prev !== 1'bx ) && ( out_s2_prev !== out_s2_expected_prev )
		&& ((out_s2_expected_prev !== last_out_s2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_s2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_s2_expected_prev);
		$display ("     Real value = %b", out_s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_out_s2_exp = out_s2_expected_prev;
	end
	if (
		( out_s3_expected_prev !== 1'bx ) && ( out_s3_prev !== out_s3_expected_prev )
		&& ((out_s3_expected_prev !== last_out_s3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_s3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_s3_expected_prev);
		$display ("     Real value = %b", out_s3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_out_s3_exp = out_s3_expected_prev;
	end
	if (
		( out_s4_expected_prev !== 1'bx ) && ( out_s4_prev !== out_s4_expected_prev )
		&& ((out_s4_expected_prev !== last_out_s4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_s4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_s4_expected_prev);
		$display ("     Real value = %b", out_s4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_out_s4_exp = out_s4_expected_prev;
	end
	if (
		( out_s5_expected_prev !== 1'bx ) && ( out_s5_prev !== out_s5_expected_prev )
		&& ((out_s5_expected_prev !== last_out_s5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_s5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_s5_expected_prev);
		$display ("     Real value = %b", out_s5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_out_s5_exp = out_s5_expected_prev;
	end
	if (
		( out_s6_expected_prev !== 1'bx ) && ( out_s6_prev !== out_s6_expected_prev )
		&& ((out_s6_expected_prev !== last_out_s6_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_s6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_s6_expected_prev);
		$display ("     Real value = %b", out_s6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_out_s6_exp = out_s6_expected_prev;
	end
	if (
		( out_s7_expected_prev !== 1'bx ) && ( out_s7_prev !== out_s7_expected_prev )
		&& ((out_s7_expected_prev !== last_out_s7_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_s7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_s7_expected_prev);
		$display ("     Real value = %b", out_s7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_s7_exp = out_s7_expected_prev;
	end
	if (
		( out_s8_expected_prev !== 1'bx ) && ( out_s8_prev !== out_s8_expected_prev )
		&& ((out_s8_expected_prev !== last_out_s8_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_s8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_s8_expected_prev);
		$display ("     Real value = %b", out_s8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_out_s8_exp = out_s8_expected_prev;
	end
	if (
		( out_z1_expected_prev !== 1'bx ) && ( out_z1_prev !== out_z1_expected_prev )
		&& ((out_z1_expected_prev !== last_out_z1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_z1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_z1_expected_prev);
		$display ("     Real value = %b", out_z1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_out_z1_exp = out_z1_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Mega_Dominskyi_SM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg in_x1;
reg in_x2;
reg in_x3;
reg in_x4;
reg in_x5;
reg in_x6;
reg in_x7;
reg in_x8;
reg in_y1;
reg in_y2;
reg in_y3;
reg in_y4;
reg in_y5;
reg in_y6;
reg in_y7;
reg in_y8;
reg in_z;
// wires                                               
wire out_s1;
wire out_s2;
wire out_s3;
wire out_s4;
wire out_s5;
wire out_s6;
wire out_s7;
wire out_s8;
wire out_z1;

wire sampler;                             

// assign statements (if any)                          
Mega_Dominskyi_SM i1 (
// port map - connection between master ports and signals/registers   
	.in_x1(in_x1),
	.in_x2(in_x2),
	.in_x3(in_x3),
	.in_x4(in_x4),
	.in_x5(in_x5),
	.in_x6(in_x6),
	.in_x7(in_x7),
	.in_x8(in_x8),
	.in_y1(in_y1),
	.in_y2(in_y2),
	.in_y3(in_y3),
	.in_y4(in_y4),
	.in_y5(in_y5),
	.in_y6(in_y6),
	.in_y7(in_y7),
	.in_y8(in_y8),
	.in_z(in_z),
	.out_s1(out_s1),
	.out_s2(out_s2),
	.out_s3(out_s3),
	.out_s4(out_s4),
	.out_s5(out_s5),
	.out_s6(out_s6),
	.out_s7(out_s7),
	.out_s8(out_s8),
	.out_z1(out_z1)
);

// in_x1
initial
begin
	in_x1 = 1'b1;
end 

// in_x2
initial
begin
	in_x2 = 1'b0;
end 

// in_x3
initial
begin
	in_x3 = 1'b1;
end 

// in_x4
initial
begin
	in_x4 = 1'b0;
end 

// in_x5
initial
begin
	in_x5 = 1'b0;
end 

// in_x6
initial
begin
	in_x6 = 1'b0;
end 

// in_x7
initial
begin
	in_x7 = 1'b1;
end 

// in_x8
initial
begin
	in_x8 = 1'b0;
end 

// in_y1
initial
begin
	in_y1 = 1'b0;
end 

// in_y2
initial
begin
	in_y2 = 1'b0;
end 

// in_y3
initial
begin
	in_y3 = 1'b0;
end 

// in_y4
initial
begin
	in_y4 = 1'b0;
end 

// in_y5
initial
begin
	in_y5 = 1'b0;
end 

// in_y6
initial
begin
	in_y6 = 1'b1;
end 

// in_y7
initial
begin
	in_y7 = 1'b1;
end 

// in_y8
initial
begin
	in_y8 = 1'b0;
end 

// in_z
initial
begin
	in_z = 1'b0;
end 

Mega_Dominskyi_SM_vlg_sample_tst tb_sample (
	.in_x1(in_x1),
	.in_x2(in_x2),
	.in_x3(in_x3),
	.in_x4(in_x4),
	.in_x5(in_x5),
	.in_x6(in_x6),
	.in_x7(in_x7),
	.in_x8(in_x8),
	.in_y1(in_y1),
	.in_y2(in_y2),
	.in_y3(in_y3),
	.in_y4(in_y4),
	.in_y5(in_y5),
	.in_y6(in_y6),
	.in_y7(in_y7),
	.in_y8(in_y8),
	.in_z(in_z),
	.sampler_tx(sampler)
);

Mega_Dominskyi_SM_vlg_check_tst tb_out(
	.out_s1(out_s1),
	.out_s2(out_s2),
	.out_s3(out_s3),
	.out_s4(out_s4),
	.out_s5(out_s5),
	.out_s6(out_s6),
	.out_s7(out_s7),
	.out_s8(out_s8),
	.out_z1(out_z1),
	.sampler_rx(sampler)
);
endmodule

