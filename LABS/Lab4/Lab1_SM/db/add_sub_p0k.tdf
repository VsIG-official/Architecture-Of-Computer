--lpm_add_sub CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="ADD" LPM_PIPELINE=2 LPM_REPRESENTATION="UNSIGNED" LPM_WIDTH=1 ONE_INPUT_IS_CONSTANT="NO" clock cout dataa datab result
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = reg 4 
SUBDESIGN add_sub_p0k
( 
	clock	:	input;
	cout	:	output;
	dataa[0..0]	:	input;
	datab[0..0]	:	input;
	result[0..0]	:	output;
) 
VARIABLE 
	cout_regrsa[1..0] : dffe;
	pad_regrsa[1..0] : dffe;
	carry_eqn[0..0]	: WIRE;
	cin_wire	: WIRE;
	datab_node[0..0]	: WIRE;
	sum_eqn[0..0]	: WIRE;

BEGIN 
	cout_regrsa[].clk = clock;
	cout_regrsa[].d = ( cout_regrsa[0..0].q, carry_eqn[0..0]);
	pad_regrsa[].clk = clock;
	pad_regrsa[].d = ( pad_regrsa[0..0].q, sum_eqn[]);
	carry_eqn[] = ( ((dataa[0..0] & datab_node[0..0]) # ((dataa[0..0] # datab_node[0..0]) & cin_wire)));
	cin_wire = B"0";
	cout = cout_regrsa[1..1].q;
	datab_node[] = datab[];
	result[0..0] = pad_regrsa[1..1].q;
	sum_eqn[] = ( ((dataa[0..0] $ datab_node[0..0]) $ cin_wire));
END;
--VALID FILE
